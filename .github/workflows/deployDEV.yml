name: deploy DEV

on:
  push:
    branches:
      - dev

jobs:
  build:
    name: build n deploy
    runs-on: self-hosted
    env: 
      REPO_DOMAIN: 190009833917.dkr.ecr.us-east-1.amazonaws.com
      REPO_URL: frog
      CLUSTER_NAME: frog
      REGION: us-east-1
    steps:
      - name: check path
        run: pwd
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}
      - name: prepare envs
        id: vars
        run: |
          echo "BRANCH=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
          echo "COMMIT=$(git rev-parse --short ${GITHUB_SHA})" >> $GITHUB_OUTPUT
          echo "TASK_DEFINITION_NAME=dev_frog" >> $GITHUB_OUTPUT
          echo "SERVICE_NAME=dev_frog" >> $GITHUB_OUTPUT
          echo "MEM=856" >> $GITHUB_OUTPUT
      - name: login to ECR
        run: aws ecr get-login-password --region ${REGION} | docker login --username AWS --password-stdin ${REPO_DOMAIN}
      - name: build & tag image
        run: |
          V=$(echo $(TZ=":Asia/Seoul" date '+%y%m%d_%H%M%S'))-${{ steps.vars.outputs.COMMIT }}
          echo $V
          docker build -t ${REPO_DOMAIN}/${REPO_URL}:${{ steps.vars.outputs.BRANCH }}_${{ steps.vars.outputs.COMMIT }} --build-arg VERSION=${V} -f ./src/deployment/Dockerfile ./src/
          docker tag ${REPO_DOMAIN}/${REPO_URL}:${{ steps.vars.outputs.BRANCH }}_${{ steps.vars.outputs.COMMIT }} ${REPO_DOMAIN}/${REPO_URL}:${{ steps.vars.outputs.BRANCH }}_latest
      - name: push image
        id: image
        run: |
          docker push ${REPO_DOMAIN}/${REPO_URL}:${{ steps.vars.outputs.BRANCH }}_${{ steps.vars.outputs.COMMIT }}
          docker push ${REPO_DOMAIN}/${REPO_URL}:${{ steps.vars.outputs.BRANCH }}_latest
      - name: clean up
        run: |
          docker rmi ${REPO_DOMAIN}/${REPO_URL}:${{ steps.vars.outputs.BRANCH }}_${{ steps.vars.outputs.COMMIT }}
          docker rmi ${REPO_DOMAIN}/${REPO_URL}:${{ steps.vars.outputs.BRANCH }}_latest
          docker image prune -f
          docker system prune --filter until=240h -f
      - name: create new task definition
        run: |
          TASK_JSON=$(cat ./src/deployment/taskDefinition.json)
          TASK_JSON=$(echo ${TASK_JSON} | sed "s/__REPO_DOMAIN__/${REPO_DOMAIN}/g")
          TASK_JSON=$(echo ${TASK_JSON} | sed "s/__REPO_URL__/${REPO_URL}/g")
          TASK_JSON=$(echo ${TASK_JSON} | sed "s/__ENV__/${{ steps.vars.outputs.BRANCH }}/g")
          TASK_JSON=$(echo ${TASK_JSON} | sed "s/__MEM__/${{ steps.vars.outputs.MEM }}/g")
          TASK_JSON=$(echo ${TASK_JSON} | sed "s/__REGION__/${REGION}/g")
          TASK_JSON=$(echo ${TASK_JSON} | sed "s/__IMAGE_DIGEST__/${{ steps.image.outputs.DIGEST }}/g")
          echo ${TASK_JSON} | tee ./src/deployment/tmp_taskDefinition.json
      - name: register new task definition
        run: |
          aws ecs register-task-definition --region "${REGION}" --family ${{ steps.vars.outputs.TASK_DEFINITION_NAME }} --cli-input-json file://./src/deployment/tmp_taskDefinition.json
      - name: update service
        run: |
          aws ecs update-service --region ${REGION} --cluster ${CLUSTER_NAME} --service ${{ steps.vars.outputs.SERVICE_NAME }} --task-definition ${{ steps.vars.outputs.TASK_DEFINITION_NAME }}

  auto-merge:
    name: auto merge to main branch
    runs-on: self-hosted
    needs: build
    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # 전체 저장소 히스토리를 가져오기 위해 깊이를 0으로 설정
          token: ${{ secrets.GITHUB_TOKEN }}  # Personal Access Token 사용
      - name: prepare
        id: vars
        run: |
          echo "BRANCH=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
          echo "COMMIT=$(git rev-parse --short ${GITHUB_SHA})" >> $GITHUB_OUTPUT
      - name: Set up Git
        run: |
          git config user.name "JokerTrickster"
          git config user.email "pkjhj485@gmail.com"
      - name: merge
        run: |
          git checkout main
          git pull
          git merge --no-ff ${{ steps.vars.outputs.BRANCH }} -m ${{ steps.vars.outputs.COMMIT }}
          git push
        env:
          ACTIONS_TOKEN: ${{ secrets.GITHUB_TOKEN }}