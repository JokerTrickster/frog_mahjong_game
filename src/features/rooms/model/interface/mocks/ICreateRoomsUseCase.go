// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	context "context"
	request "main/features/rooms/model/request"

	mock "github.com/stretchr/testify/mock"

	response "main/features/rooms/model/response"
)

// ICreateRoomsUseCase is an autogenerated mock type for the ICreateRoomsUseCase type
type ICreateRoomsUseCase struct {
	mock.Mock
}

// Create provides a mock function with given fields: c, uID, email, req
func (_m *ICreateRoomsUseCase) Create(c context.Context, uID uint, email string, req *request.ReqCreate) (response.ResCreateRoom, error) {
	ret := _m.Called(c, uID, email, req)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 response.ResCreateRoom
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, string, *request.ReqCreate) (response.ResCreateRoom, error)); ok {
		return rf(c, uID, email, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint, string, *request.ReqCreate) response.ResCreateRoom); ok {
		r0 = rf(c, uID, email, req)
	} else {
		r0 = ret.Get(0).(response.ResCreateRoom)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint, string, *request.ReqCreate) error); ok {
		r1 = rf(c, uID, email, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewICreateRoomsUseCase creates a new instance of ICreateRoomsUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewICreateRoomsUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *ICreateRoomsUseCase {
	mock := &ICreateRoomsUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
