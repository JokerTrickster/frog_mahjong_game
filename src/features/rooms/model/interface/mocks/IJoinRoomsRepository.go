// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	context "context"
	mysql "main/utils/db/mysql"

	mock "github.com/stretchr/testify/mock"

	request "main/features/rooms/model/request"
)

// IJoinRoomsRepository is an autogenerated mock type for the IJoinRoomsRepository type
type IJoinRoomsRepository struct {
	mock.Mock
}

// FindOneAndUpdateRoom provides a mock function with given fields: ctx, RoomID
func (_m *IJoinRoomsRepository) FindOneAndUpdateRoom(ctx context.Context, RoomID uint) error {
	ret := _m.Called(ctx, RoomID)

	if len(ret) == 0 {
		panic("no return value specified for FindOneAndUpdateRoom")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, RoomID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindOneAndUpdateUser provides a mock function with given fields: ctx, uID, RoomsID
func (_m *IJoinRoomsRepository) FindOneAndUpdateUser(ctx context.Context, uID uint, RoomsID uint) error {
	ret := _m.Called(ctx, uID, RoomsID)

	if len(ret) == 0 {
		panic("no return value specified for FindOneAndUpdateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, uint) error); ok {
		r0 = rf(ctx, uID, RoomsID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindOneRoom provides a mock function with given fields: ctx, req
func (_m *IJoinRoomsRepository) FindOneRoom(ctx context.Context, req *request.ReqJoin) (mysql.Rooms, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for FindOneRoom")
	}

	var r0 mysql.Rooms
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *request.ReqJoin) (mysql.Rooms, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *request.ReqJoin) mysql.Rooms); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(mysql.Rooms)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *request.ReqJoin) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertOneRoomUser provides a mock function with given fields: ctx, RoomUserDTO
func (_m *IJoinRoomsRepository) InsertOneRoomUser(ctx context.Context, RoomUserDTO mysql.RoomUsers) error {
	ret := _m.Called(ctx, RoomUserDTO)

	if len(ret) == 0 {
		panic("no return value specified for InsertOneRoomUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, mysql.RoomUsers) error); ok {
		r0 = rf(ctx, RoomUserDTO)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIJoinRoomsRepository creates a new instance of IJoinRoomsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIJoinRoomsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IJoinRoomsRepository {
	mock := &IJoinRoomsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
