// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	context "context"
	mysql "main/utils/db/mysql"

	mock "github.com/stretchr/testify/mock"

	response "main/features/rooms/model/response"
)

// IUserListRoomsRepository is an autogenerated mock type for the IUserListRoomsRepository type
type IUserListRoomsRepository struct {
	mock.Mock
}

// FindOneRoom provides a mock function with given fields: ctx, RoomID
func (_m *IUserListRoomsRepository) FindOneRoom(ctx context.Context, RoomID uint) (mysql.Rooms, error) {
	ret := _m.Called(ctx, RoomID)

	if len(ret) == 0 {
		panic("no return value specified for FindOneRoom")
	}

	var r0 mysql.Rooms
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (mysql.Rooms, error)); ok {
		return rf(ctx, RoomID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) mysql.Rooms); ok {
		r0 = rf(ctx, RoomID)
	} else {
		r0 = ret.Get(0).(mysql.Rooms)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, RoomID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindRoomUser provides a mock function with given fields: ctx, RoomID
func (_m *IUserListRoomsRepository) FindRoomUser(ctx context.Context, RoomID uint) ([]response.User, error) {
	ret := _m.Called(ctx, RoomID)

	if len(ret) == 0 {
		panic("no return value specified for FindRoomUser")
	}

	var r0 []response.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) ([]response.User, error)); ok {
		return rf(ctx, RoomID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) []response.User); ok {
		r0 = rf(ctx, RoomID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]response.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, RoomID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIUserListRoomsRepository creates a new instance of IUserListRoomsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIUserListRoomsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IUserListRoomsRepository {
	mock := &IUserListRoomsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
