// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	context "context"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	mysql "main/utils/db/mysql"
)

// IOutRoomsRepository is an autogenerated mock type for the IOutRoomsRepository type
type IOutRoomsRepository struct {
	mock.Mock
}

// ChangeRoomOnwer provides a mock function with given fields: ctx, tx, RoomID, ownerID
func (_m *IOutRoomsRepository) ChangeRoomOnwer(ctx context.Context, tx *gorm.DB, RoomID uint, ownerID uint) error {
	ret := _m.Called(ctx, tx, RoomID, ownerID)

	if len(ret) == 0 {
		panic("no return value specified for ChangeRoomOnwer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, uint, uint) error); ok {
		r0 = rf(ctx, tx, RoomID, ownerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindOneAndDeleteRoom provides a mock function with given fields: ctx, tx, RoomID
func (_m *IOutRoomsRepository) FindOneAndDeleteRoom(ctx context.Context, tx *gorm.DB, RoomID uint) error {
	ret := _m.Called(ctx, tx, RoomID)

	if len(ret) == 0 {
		panic("no return value specified for FindOneAndDeleteRoom")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, uint) error); ok {
		r0 = rf(ctx, tx, RoomID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindOneAndDeleteRoomUser provides a mock function with given fields: ctx, tx, uID, RoomID
func (_m *IOutRoomsRepository) FindOneAndDeleteRoomUser(ctx context.Context, tx *gorm.DB, uID uint, RoomID uint) error {
	ret := _m.Called(ctx, tx, uID, RoomID)

	if len(ret) == 0 {
		panic("no return value specified for FindOneAndDeleteRoomUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, uint, uint) error); ok {
		r0 = rf(ctx, tx, uID, RoomID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindOneAndUpdateRoom provides a mock function with given fields: ctx, tx, RoomID
func (_m *IOutRoomsRepository) FindOneAndUpdateRoom(ctx context.Context, tx *gorm.DB, RoomID uint) (mysql.Rooms, error) {
	ret := _m.Called(ctx, tx, RoomID)

	if len(ret) == 0 {
		panic("no return value specified for FindOneAndUpdateRoom")
	}

	var r0 mysql.Rooms
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, uint) (mysql.Rooms, error)); ok {
		return rf(ctx, tx, RoomID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, uint) mysql.Rooms); ok {
		r0 = rf(ctx, tx, RoomID)
	} else {
		r0 = ret.Get(0).(mysql.Rooms)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gorm.DB, uint) error); ok {
		r1 = rf(ctx, tx, RoomID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOneAndUpdateUser provides a mock function with given fields: ctx, tx, uID
func (_m *IOutRoomsRepository) FindOneAndUpdateUser(ctx context.Context, tx *gorm.DB, uID uint) error {
	ret := _m.Called(ctx, tx, uID)

	if len(ret) == 0 {
		panic("no return value specified for FindOneAndUpdateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, uint) error); ok {
		r0 = rf(ctx, tx, uID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindOneRoomUser provides a mock function with given fields: ctx, tx, RoomID
func (_m *IOutRoomsRepository) FindOneRoomUser(ctx context.Context, tx *gorm.DB, RoomID uint) (mysql.RoomUsers, error) {
	ret := _m.Called(ctx, tx, RoomID)

	if len(ret) == 0 {
		panic("no return value specified for FindOneRoomUser")
	}

	var r0 mysql.RoomUsers
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, uint) (mysql.RoomUsers, error)); ok {
		return rf(ctx, tx, RoomID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, uint) mysql.RoomUsers); ok {
		r0 = rf(ctx, tx, RoomID)
	} else {
		r0 = ret.Get(0).(mysql.RoomUsers)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gorm.DB, uint) error); ok {
		r1 = rf(ctx, tx, RoomID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOneUser provides a mock function with given fields: ctx, tx, uID
func (_m *IOutRoomsRepository) FindOneUser(ctx context.Context, tx *gorm.DB, uID uint) (mysql.Users, error) {
	ret := _m.Called(ctx, tx, uID)

	if len(ret) == 0 {
		panic("no return value specified for FindOneUser")
	}

	var r0 mysql.Users
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, uint) (mysql.Users, error)); ok {
		return rf(ctx, tx, uID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, uint) mysql.Users); ok {
		r0 = rf(ctx, tx, uID)
	} else {
		r0 = ret.Get(0).(mysql.Users)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gorm.DB, uint) error); ok {
		r1 = rf(ctx, tx, uID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIOutRoomsRepository creates a new instance of IOutRoomsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIOutRoomsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IOutRoomsRepository {
	mock := &IOutRoomsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
