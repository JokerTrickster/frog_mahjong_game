// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// IOutRoomsRepository is an autogenerated mock type for the IOutRoomsRepository type
type IOutRoomsRepository struct {
	mock.Mock
}

// FindOneAndDeleteRoomUser provides a mock function with given fields: ctx, uID, RoomID
func (_m *IOutRoomsRepository) FindOneAndDeleteRoomUser(ctx context.Context, uID uint, RoomID uint) error {
	ret := _m.Called(ctx, uID, RoomID)

	if len(ret) == 0 {
		panic("no return value specified for FindOneAndDeleteRoomUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, uint) error); ok {
		r0 = rf(ctx, uID, RoomID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindOneAndUpdateRoom provides a mock function with given fields: ctx, RoomID
func (_m *IOutRoomsRepository) FindOneAndUpdateRoom(ctx context.Context, RoomID uint) error {
	ret := _m.Called(ctx, RoomID)

	if len(ret) == 0 {
		panic("no return value specified for FindOneAndUpdateRoom")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, RoomID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindOneAndUpdateUser provides a mock function with given fields: ctx, uID
func (_m *IOutRoomsRepository) FindOneAndUpdateUser(ctx context.Context, uID uint) error {
	ret := _m.Called(ctx, uID)

	if len(ret) == 0 {
		panic("no return value specified for FindOneAndUpdateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, uID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIOutRoomsRepository creates a new instance of IOutRoomsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIOutRoomsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IOutRoomsRepository {
	mock := &IOutRoomsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
