// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	context "context"
	mysql "main/utils/db/mysql"

	mock "github.com/stretchr/testify/mock"
)

// ICreateRoomsRepository is an autogenerated mock type for the ICreateRoomsRepository type
type ICreateRoomsRepository struct {
	mock.Mock
}

// FindOneAndUpdateUser provides a mock function with given fields: ctx, uID, RoomID
func (_m *ICreateRoomsRepository) FindOneAndUpdateUser(ctx context.Context, uID uint, RoomID uint) error {
	ret := _m.Called(ctx, uID, RoomID)

	if len(ret) == 0 {
		panic("no return value specified for FindOneAndUpdateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, uint) error); ok {
		r0 = rf(ctx, uID, RoomID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertOneRoom provides a mock function with given fields: ctx, RoomsDTO
func (_m *ICreateRoomsRepository) InsertOneRoom(ctx context.Context, RoomsDTO mysql.Rooms) (int, error) {
	ret := _m.Called(ctx, RoomsDTO)

	if len(ret) == 0 {
		panic("no return value specified for InsertOneRoom")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, mysql.Rooms) (int, error)); ok {
		return rf(ctx, RoomsDTO)
	}
	if rf, ok := ret.Get(0).(func(context.Context, mysql.Rooms) int); ok {
		r0 = rf(ctx, RoomsDTO)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, mysql.Rooms) error); ok {
		r1 = rf(ctx, RoomsDTO)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertOneRoomUser provides a mock function with given fields: ctx, RoomsUserDTO
func (_m *ICreateRoomsRepository) InsertOneRoomUser(ctx context.Context, RoomsUserDTO mysql.RoomUsers) error {
	ret := _m.Called(ctx, RoomsUserDTO)

	if len(ret) == 0 {
		panic("no return value specified for InsertOneRoomUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, mysql.RoomUsers) error); ok {
		r0 = rf(ctx, RoomsUserDTO)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewICreateRoomsRepository creates a new instance of ICreateRoomsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewICreateRoomsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ICreateRoomsRepository {
	mock := &ICreateRoomsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
