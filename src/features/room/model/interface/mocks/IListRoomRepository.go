// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"
	mysql "main/utils/db/mysql"

	mock "github.com/stretchr/testify/mock"
)

// IListRoomRepository is an autogenerated mock type for the IListRoomRepository type
type IListRoomRepository struct {
	mock.Mock
}

// CountRoomList provides a mock function with given fields: ctx
func (_m *IListRoomRepository) CountRoomList(ctx context.Context) (int, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CountRoomList")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindRoomList provides a mock function with given fields: ctx, page, pageSize
func (_m *IListRoomRepository) FindRoomList(ctx context.Context, page int, pageSize int) ([]mysql.Rooms, error) {
	ret := _m.Called(ctx, page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for FindRoomList")
	}

	var r0 []mysql.Rooms
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]mysql.Rooms, error)); ok {
		return rf(ctx, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []mysql.Rooms); ok {
		r0 = rf(ctx, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]mysql.Rooms)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIListRoomRepository creates a new instance of IListRoomRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIListRoomRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IListRoomRepository {
	mock := &IListRoomRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
