// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	context "context"
	response "main/features/room/model/response"

	mock "github.com/stretchr/testify/mock"
)

// IListRoomUseCase is an autogenerated mock type for the IListRoomUseCase type
type IListRoomUseCase struct {
	mock.Mock
}

// List provides a mock function with given fields: c, page, pageSize
func (_m *IListRoomUseCase) List(c context.Context, page int, pageSize int) (response.ResListRoom, error) {
	ret := _m.Called(c, page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 response.ResListRoom
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) (response.ResListRoom, error)); ok {
		return rf(c, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) response.ResListRoom); ok {
		r0 = rf(c, page, pageSize)
	} else {
		r0 = ret.Get(0).(response.ResListRoom)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(c, page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIListRoomUseCase creates a new instance of IListRoomUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIListRoomUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *IListRoomUseCase {
	mock := &IListRoomUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
