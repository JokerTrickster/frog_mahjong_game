// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	context "context"
	mysql "main/utils/db/mysql"

	mock "github.com/stretchr/testify/mock"
)

// IMessageChatRepository is an autogenerated mock type for the IMessageChatRepository type
type IMessageChatRepository struct {
	mock.Mock
}

// FindOneChat provides a mock function with given fields: ctx, secret
func (_m *IMessageChatRepository) FindOneChat(ctx context.Context, secret string) (*mysql.Chats, error) {
	ret := _m.Called(ctx, secret)

	if len(ret) == 0 {
		panic("no return value specified for FindOneChat")
	}

	var r0 *mysql.Chats
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*mysql.Chats, error)); ok {
		return rf(ctx, secret)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *mysql.Chats); ok {
		r0 = rf(ctx, secret)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mysql.Chats)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, secret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIMessageChatRepository creates a new instance of IMessageChatRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIMessageChatRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IMessageChatRepository {
	mock := &IMessageChatRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
