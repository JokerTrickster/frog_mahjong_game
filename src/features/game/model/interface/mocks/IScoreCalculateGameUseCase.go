// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	context "context"
	request "main/features/game/model/request"

	mock "github.com/stretchr/testify/mock"
)

// IScoreCalculateGameUseCase is an autogenerated mock type for the IScoreCalculateGameUseCase type
type IScoreCalculateGameUseCase struct {
	mock.Mock
}

// ScoreCalculate provides a mock function with given fields: c, userID, req
func (_m *IScoreCalculateGameUseCase) ScoreCalculate(c context.Context, userID uint, req *request.ReqScoreCalculate) (int, []string, error) {
	ret := _m.Called(c, userID, req)

	if len(ret) == 0 {
		panic("no return value specified for ScoreCalculate")
	}

	var r0 int
	var r1 []string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, *request.ReqScoreCalculate) (int, []string, error)); ok {
		return rf(c, userID, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint, *request.ReqScoreCalculate) int); ok {
		r0 = rf(c, userID, req)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint, *request.ReqScoreCalculate) []string); ok {
		r1 = rf(c, userID, req)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]string)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, uint, *request.ReqScoreCalculate) error); ok {
		r2 = rf(c, userID, req)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewIScoreCalculateGameUseCase creates a new instance of IScoreCalculateGameUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIScoreCalculateGameUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *IScoreCalculateGameUseCase {
	mock := &IScoreCalculateGameUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
