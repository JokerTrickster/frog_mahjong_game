// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	context "context"
	request "main/features/game/model/request"

	mock "github.com/stretchr/testify/mock"
)

// ILoanGameRepository is an autogenerated mock type for the ILoanGameRepository type
type ILoanGameRepository struct {
	mock.Mock
}

// CheckLoan provides a mock function with given fields: c, req
func (_m *ILoanGameRepository) CheckLoan(c context.Context, req *request.ReqLoan) error {
	ret := _m.Called(c, req)

	if len(ret) == 0 {
		panic("no return value specified for CheckLoan")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *request.ReqLoan) error); ok {
		r0 = rf(c, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Loan provides a mock function with given fields: c, req
func (_m *ILoanGameRepository) Loan(c context.Context, req *request.ReqLoan) error {
	ret := _m.Called(c, req)

	if len(ret) == 0 {
		panic("no return value specified for Loan")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *request.ReqLoan) error); ok {
		r0 = rf(c, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateRoomUserCardCount provides a mock function with given fields: c, userID, roomID
func (_m *ILoanGameRepository) UpdateRoomUserCardCount(c context.Context, userID uint, roomID uint) error {
	ret := _m.Called(c, userID, roomID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRoomUserCardCount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, uint) error); ok {
		r0 = rf(c, userID, roomID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewILoanGameRepository creates a new instance of ILoanGameRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewILoanGameRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ILoanGameRepository {
	mock := &ILoanGameRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
