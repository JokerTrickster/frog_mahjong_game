// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	context "context"
	request "main/features/game/model/request"

	mock "github.com/stretchr/testify/mock"
)

// IWinRequestGameUseCase is an autogenerated mock type for the IWinRequestGameUseCase type
type IWinRequestGameUseCase struct {
	mock.Mock
}

// WinRequest provides a mock function with given fields: c, req
func (_m *IWinRequestGameUseCase) WinRequest(c context.Context, req *request.ReqWinRequest) (bool, error) {
	ret := _m.Called(c, req)

	if len(ret) == 0 {
		panic("no return value specified for WinRequest")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *request.ReqWinRequest) (bool, error)); ok {
		return rf(c, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *request.ReqWinRequest) bool); ok {
		r0 = rf(c, req)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *request.ReqWinRequest) error); ok {
		r1 = rf(c, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIWinRequestGameUseCase creates a new instance of IWinRequestGameUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIWinRequestGameUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *IWinRequestGameUseCase {
	mock := &IWinRequestGameUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
