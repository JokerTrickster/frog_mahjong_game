// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	context "context"
	mysql "main/utils/db/mysql"

	mock "github.com/stretchr/testify/mock"
)

// ISigninAuthRepository is an autogenerated mock type for the ISigninAuthRepository type
type ISigninAuthRepository struct {
	mock.Mock
}

// DeleteToken provides a mock function with given fields: ctx, uID
func (_m *ISigninAuthRepository) DeleteToken(ctx context.Context, uID uint) error {
	ret := _m.Called(ctx, uID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, uID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindOneAndUpdateUser provides a mock function with given fields: ctx, email, password
func (_m *ISigninAuthRepository) FindOneAndUpdateUser(ctx context.Context, email string, password string) (mysql.Users, error) {
	ret := _m.Called(ctx, email, password)

	if len(ret) == 0 {
		panic("no return value specified for FindOneAndUpdateUser")
	}

	var r0 mysql.Users
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (mysql.Users, error)); ok {
		return rf(ctx, email, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) mysql.Users); ok {
		r0 = rf(ctx, email, password)
	} else {
		r0 = ret.Get(0).(mysql.Users)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveToken provides a mock function with given fields: ctx, uID, accessToken, refreshToken, refreshTknExpiredAt
func (_m *ISigninAuthRepository) SaveToken(ctx context.Context, uID uint, accessToken string, refreshToken string, refreshTknExpiredAt int64) error {
	ret := _m.Called(ctx, uID, accessToken, refreshToken, refreshTknExpiredAt)

	if len(ret) == 0 {
		panic("no return value specified for SaveToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, string, string, int64) error); ok {
		r0 = rf(ctx, uID, accessToken, refreshToken, refreshTknExpiredAt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewISigninAuthRepository creates a new instance of ISigninAuthRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewISigninAuthRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ISigninAuthRepository {
	mock := &ISigninAuthRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
