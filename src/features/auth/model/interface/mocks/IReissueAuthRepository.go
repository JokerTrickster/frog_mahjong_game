// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	context "context"
	mysql "main/utils/db/mysql"

	mock "github.com/stretchr/testify/mock"
)

// IReissueAuthRepository is an autogenerated mock type for the IReissueAuthRepository type
type IReissueAuthRepository struct {
	mock.Mock
}

// DeleteToken provides a mock function with given fields: ctx, uID
func (_m *IReissueAuthRepository) DeleteToken(ctx context.Context, uID uint) error {
	ret := _m.Called(ctx, uID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, uID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveToken provides a mock function with given fields: ctx, token
func (_m *IReissueAuthRepository) SaveToken(ctx context.Context, token mysql.Tokens) error {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for SaveToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, mysql.Tokens) error); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIReissueAuthRepository creates a new instance of IReissueAuthRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIReissueAuthRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IReissueAuthRepository {
	mock := &IReissueAuthRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
