// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"
	mysql "main/utils/db/mysql"

	mock "github.com/stretchr/testify/mock"
)

// ISignupAuthRepository is an autogenerated mock type for the ISignupAuthRepository type
type ISignupAuthRepository struct {
	mock.Mock
}

// FindOneUserAuth provides a mock function with given fields: ctx, name
func (_m *ISignupAuthRepository) FindOneUserAuth(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for FindOneUserAuth")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertOneUserAuthDTO provides a mock function with given fields: ctx, userAuthDTO
func (_m *ISignupAuthRepository) InsertOneUserAuthDTO(ctx context.Context, userAuthDTO mysql.GormUserAuthDTO) error {
	ret := _m.Called(ctx, userAuthDTO)

	if len(ret) == 0 {
		panic("no return value specified for InsertOneUserAuthDTO")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, mysql.GormUserAuthDTO) error); ok {
		r0 = rf(ctx, userAuthDTO)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertOneUserDTO provides a mock function with given fields: ctx, userDTO
func (_m *ISignupAuthRepository) InsertOneUserDTO(ctx context.Context, userDTO mysql.GormUserDTO) (string, error) {
	ret := _m.Called(ctx, userDTO)

	if len(ret) == 0 {
		panic("no return value specified for InsertOneUserDTO")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, mysql.GormUserDTO) (string, error)); ok {
		return rf(ctx, userDTO)
	}
	if rf, ok := ret.Get(0).(func(context.Context, mysql.GormUserDTO) string); ok {
		r0 = rf(ctx, userDTO)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, mysql.GormUserDTO) error); ok {
		r1 = rf(ctx, userDTO)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewISignupAuthRepository creates a new instance of ISignupAuthRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewISignupAuthRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ISignupAuthRepository {
	mock := &ISignupAuthRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
