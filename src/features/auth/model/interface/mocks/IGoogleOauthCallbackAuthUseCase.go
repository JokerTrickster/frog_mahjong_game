// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	context "context"
	response "main/features/auth/model/response"

	mock "github.com/stretchr/testify/mock"
)

// IGoogleOauthCallbackAuthUseCase is an autogenerated mock type for the IGoogleOauthCallbackAuthUseCase type
type IGoogleOauthCallbackAuthUseCase struct {
	mock.Mock
}

// GoogleOauthCallback provides a mock function with given fields: c, code
func (_m *IGoogleOauthCallbackAuthUseCase) GoogleOauthCallback(c context.Context, code string) (response.GoogleOauthCallbackRes, error) {
	ret := _m.Called(c, code)

	if len(ret) == 0 {
		panic("no return value specified for GoogleOauthCallback")
	}

	var r0 response.GoogleOauthCallbackRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (response.GoogleOauthCallbackRes, error)); ok {
		return rf(c, code)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) response.GoogleOauthCallbackRes); ok {
		r0 = rf(c, code)
	} else {
		r0 = ret.Get(0).(response.GoogleOauthCallbackRes)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIGoogleOauthCallbackAuthUseCase creates a new instance of IGoogleOauthCallbackAuthUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIGoogleOauthCallbackAuthUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *IGoogleOauthCallbackAuthUseCase {
	mock := &IGoogleOauthCallbackAuthUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
