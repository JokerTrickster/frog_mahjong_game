// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	context "context"
	response "main/features/users/model/response"

	mock "github.com/stretchr/testify/mock"
)

// IGetUsersUseCase is an autogenerated mock type for the IGetUsersUseCase type
type IGetUsersUseCase struct {
	mock.Mock
}

// Get provides a mock function with given fields: c, userID
func (_m *IGetUsersUseCase) Get(c context.Context, userID int) (response.ResGetUser, error) {
	ret := _m.Called(c, userID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 response.ResGetUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (response.ResGetUser, error)); ok {
		return rf(c, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) response.ResGetUser); ok {
		r0 = rf(c, userID)
	} else {
		r0 = ret.Get(0).(response.ResGetUser)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(c, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIGetUsersUseCase creates a new instance of IGetUsersUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIGetUsersUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *IGetUsersUseCase {
	mock := &IGetUsersUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
