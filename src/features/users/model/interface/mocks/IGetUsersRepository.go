// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	context "context"
	mysql "main/utils/db/mysql"

	mock "github.com/stretchr/testify/mock"
)

// IGetUsersRepository is an autogenerated mock type for the IGetUsersRepository type
type IGetUsersRepository struct {
	mock.Mock
}

// FindOneUser provides a mock function with given fields: ctx, userID
func (_m *IGetUsersRepository) FindOneUser(ctx context.Context, userID int) (mysql.Users, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for FindOneUser")
	}

	var r0 mysql.Users
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (mysql.Users, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) mysql.Users); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(mysql.Users)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIGetUsersRepository creates a new instance of IGetUsersRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIGetUsersRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IGetUsersRepository {
	mock := &IGetUsersRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
