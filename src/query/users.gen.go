// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"main/utils/db/mysql"
)

func newUsers(db *gorm.DB, opts ...gen.DOOption) users {
	_users := users{}

	_users.usersDo.UseDB(db, opts...)
	_users.usersDo.UseModel(&mysql.Users{})

	tableName := _users.usersDo.TableName()
	_users.ALL = field.NewAsterisk(tableName)
	_users.ID = field.NewUint(tableName, "id")
	_users.CreatedAt = field.NewTime(tableName, "created_at")
	_users.UpdatedAt = field.NewTime(tableName, "updated_at")
	_users.DeletedAt = field.NewField(tableName, "deleted_at")
	_users.Name = field.NewString(tableName, "name")
	_users.Email = field.NewString(tableName, "email")
	_users.Password = field.NewString(tableName, "password")
	_users.Score = field.NewInt(tableName, "score")
	_users.State = field.NewString(tableName, "state")
	_users.RoomID = field.NewInt(tableName, "room_id")
	_users.Provider = field.NewString(tableName, "provider")

	_users.fillFieldMap()

	return _users
}

type users struct {
	usersDo

	ALL       field.Asterisk
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	Name      field.String
	Email     field.String
	Password  field.String
	Score     field.Int
	State     field.String
	RoomID    field.Int
	Provider  field.String

	fieldMap map[string]field.Expr
}

func (u users) Table(newTableName string) *users {
	u.usersDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u users) As(alias string) *users {
	u.usersDo.DO = *(u.usersDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *users) updateTableName(table string) *users {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewUint(table, "id")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")
	u.DeletedAt = field.NewField(table, "deleted_at")
	u.Name = field.NewString(table, "name")
	u.Email = field.NewString(table, "email")
	u.Password = field.NewString(table, "password")
	u.Score = field.NewInt(table, "score")
	u.State = field.NewString(table, "state")
	u.RoomID = field.NewInt(table, "room_id")
	u.Provider = field.NewString(table, "provider")

	u.fillFieldMap()

	return u
}

func (u *users) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *users) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 11)
	u.fieldMap["id"] = u.ID
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["deleted_at"] = u.DeletedAt
	u.fieldMap["name"] = u.Name
	u.fieldMap["email"] = u.Email
	u.fieldMap["password"] = u.Password
	u.fieldMap["score"] = u.Score
	u.fieldMap["state"] = u.State
	u.fieldMap["room_id"] = u.RoomID
	u.fieldMap["provider"] = u.Provider
}

func (u users) clone(db *gorm.DB) users {
	u.usersDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u users) replaceDB(db *gorm.DB) users {
	u.usersDo.ReplaceDB(db)
	return u
}

type usersDo struct{ gen.DO }

type IUsersDo interface {
	gen.SubQuery
	Debug() IUsersDo
	WithContext(ctx context.Context) IUsersDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUsersDo
	WriteDB() IUsersDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUsersDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUsersDo
	Not(conds ...gen.Condition) IUsersDo
	Or(conds ...gen.Condition) IUsersDo
	Select(conds ...field.Expr) IUsersDo
	Where(conds ...gen.Condition) IUsersDo
	Order(conds ...field.Expr) IUsersDo
	Distinct(cols ...field.Expr) IUsersDo
	Omit(cols ...field.Expr) IUsersDo
	Join(table schema.Tabler, on ...field.Expr) IUsersDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUsersDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUsersDo
	Group(cols ...field.Expr) IUsersDo
	Having(conds ...gen.Condition) IUsersDo
	Limit(limit int) IUsersDo
	Offset(offset int) IUsersDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUsersDo
	Unscoped() IUsersDo
	Create(values ...*mysql.Users) error
	CreateInBatches(values []*mysql.Users, batchSize int) error
	Save(values ...*mysql.Users) error
	First() (*mysql.Users, error)
	Take() (*mysql.Users, error)
	Last() (*mysql.Users, error)
	Find() ([]*mysql.Users, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*mysql.Users, err error)
	FindInBatches(result *[]*mysql.Users, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*mysql.Users) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUsersDo
	Assign(attrs ...field.AssignExpr) IUsersDo
	Joins(fields ...field.RelationField) IUsersDo
	Preload(fields ...field.RelationField) IUsersDo
	FirstOrInit() (*mysql.Users, error)
	FirstOrCreate() (*mysql.Users, error)
	FindByPage(offset int, limit int) (result []*mysql.Users, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUsersDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetByID(id int) (result mysql.Users, err error)
	GetByRoles(rolesName []string) (result []*mysql.Users, err error)
	InsertValue(name string, age int) (err error)
}

// SELECT * FROM @@table WHERE id=@id
func (u usersDo) GetByID(id int) (result mysql.Users, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM users WHERE id=? ")

	var executeSQL *gorm.DB
	executeSQL = u.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// GetByRoles query data by roles and return it as *slice of pointer*
//
//	(The below blank line is required to comment for the generated method)
//
// SELECT * FROM @@table WHERE role IN @rolesName
func (u usersDo) GetByRoles(rolesName []string) (result []*mysql.Users, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, rolesName)
	generateSQL.WriteString("SELECT * FROM users WHERE role IN ? ")

	var executeSQL *gorm.DB
	executeSQL = u.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// InsertValue insert value
//
// INSERT INTO @@table (name, age) VALUES (@name, @age)
func (u usersDo) InsertValue(name string, age int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, name)
	params = append(params, age)
	generateSQL.WriteString("INSERT INTO users (name, age) VALUES (?, ?) ")

	var executeSQL *gorm.DB
	executeSQL = u.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (u usersDo) Debug() IUsersDo {
	return u.withDO(u.DO.Debug())
}

func (u usersDo) WithContext(ctx context.Context) IUsersDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u usersDo) ReadDB() IUsersDo {
	return u.Clauses(dbresolver.Read)
}

func (u usersDo) WriteDB() IUsersDo {
	return u.Clauses(dbresolver.Write)
}

func (u usersDo) Session(config *gorm.Session) IUsersDo {
	return u.withDO(u.DO.Session(config))
}

func (u usersDo) Clauses(conds ...clause.Expression) IUsersDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u usersDo) Returning(value interface{}, columns ...string) IUsersDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u usersDo) Not(conds ...gen.Condition) IUsersDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u usersDo) Or(conds ...gen.Condition) IUsersDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u usersDo) Select(conds ...field.Expr) IUsersDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u usersDo) Where(conds ...gen.Condition) IUsersDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u usersDo) Order(conds ...field.Expr) IUsersDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u usersDo) Distinct(cols ...field.Expr) IUsersDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u usersDo) Omit(cols ...field.Expr) IUsersDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u usersDo) Join(table schema.Tabler, on ...field.Expr) IUsersDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u usersDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUsersDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u usersDo) RightJoin(table schema.Tabler, on ...field.Expr) IUsersDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u usersDo) Group(cols ...field.Expr) IUsersDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u usersDo) Having(conds ...gen.Condition) IUsersDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u usersDo) Limit(limit int) IUsersDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u usersDo) Offset(offset int) IUsersDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u usersDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUsersDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u usersDo) Unscoped() IUsersDo {
	return u.withDO(u.DO.Unscoped())
}

func (u usersDo) Create(values ...*mysql.Users) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u usersDo) CreateInBatches(values []*mysql.Users, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u usersDo) Save(values ...*mysql.Users) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u usersDo) First() (*mysql.Users, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*mysql.Users), nil
	}
}

func (u usersDo) Take() (*mysql.Users, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*mysql.Users), nil
	}
}

func (u usersDo) Last() (*mysql.Users, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*mysql.Users), nil
	}
}

func (u usersDo) Find() ([]*mysql.Users, error) {
	result, err := u.DO.Find()
	return result.([]*mysql.Users), err
}

func (u usersDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*mysql.Users, err error) {
	buf := make([]*mysql.Users, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u usersDo) FindInBatches(result *[]*mysql.Users, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u usersDo) Attrs(attrs ...field.AssignExpr) IUsersDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u usersDo) Assign(attrs ...field.AssignExpr) IUsersDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u usersDo) Joins(fields ...field.RelationField) IUsersDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u usersDo) Preload(fields ...field.RelationField) IUsersDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u usersDo) FirstOrInit() (*mysql.Users, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*mysql.Users), nil
	}
}

func (u usersDo) FirstOrCreate() (*mysql.Users, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*mysql.Users), nil
	}
}

func (u usersDo) FindByPage(offset int, limit int) (result []*mysql.Users, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u usersDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u usersDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u usersDo) Delete(models ...*mysql.Users) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *usersDo) withDO(do gen.Dao) *usersDo {
	u.DO = *do.(*gen.DO)
	return u
}
