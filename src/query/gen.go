// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q         = new(Query)
	Cards     *cards
	Chats     *chats
	RoomUsers *roomUsers
	Rooms     *rooms
	Tokens    *tokens
	Users     *users
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Cards = &Q.Cards
	Chats = &Q.Chats
	RoomUsers = &Q.RoomUsers
	Rooms = &Q.Rooms
	Tokens = &Q.Tokens
	Users = &Q.Users
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:        db,
		Cards:     newCards(db, opts...),
		Chats:     newChats(db, opts...),
		RoomUsers: newRoomUsers(db, opts...),
		Rooms:     newRooms(db, opts...),
		Tokens:    newTokens(db, opts...),
		Users:     newUsers(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Cards     cards
	Chats     chats
	RoomUsers roomUsers
	Rooms     rooms
	Tokens    tokens
	Users     users
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:        db,
		Cards:     q.Cards.clone(db),
		Chats:     q.Chats.clone(db),
		RoomUsers: q.RoomUsers.clone(db),
		Rooms:     q.Rooms.clone(db),
		Tokens:    q.Tokens.clone(db),
		Users:     q.Users.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:        db,
		Cards:     q.Cards.replaceDB(db),
		Chats:     q.Chats.replaceDB(db),
		RoomUsers: q.RoomUsers.replaceDB(db),
		Rooms:     q.Rooms.replaceDB(db),
		Tokens:    q.Tokens.replaceDB(db),
		Users:     q.Users.replaceDB(db),
	}
}

type queryCtx struct {
	Cards     ICardsDo
	Chats     IChatsDo
	RoomUsers IRoomUsersDo
	Rooms     IRoomsDo
	Tokens    ITokensDo
	Users     IUsersDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Cards:     q.Cards.WithContext(ctx),
		Chats:     q.Chats.WithContext(ctx),
		RoomUsers: q.RoomUsers.WithContext(ctx),
		Rooms:     q.Rooms.WithContext(ctx),
		Tokens:    q.Tokens.WithContext(ctx),
		Users:     q.Users.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
