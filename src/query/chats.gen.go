// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"main/utils/db/mysql"
)

func newChats(db *gorm.DB, opts ...gen.DOOption) chats {
	_chats := chats{}

	_chats.chatsDo.UseDB(db, opts...)
	_chats.chatsDo.UseModel(&mysql.Chats{})

	tableName := _chats.chatsDo.TableName()
	_chats.ALL = field.NewAsterisk(tableName)
	_chats.ID = field.NewUint(tableName, "id")
	_chats.CreatedAt = field.NewTime(tableName, "created_at")
	_chats.UpdatedAt = field.NewTime(tableName, "updated_at")
	_chats.DeletedAt = field.NewField(tableName, "deleted_at")
	_chats.UserID = field.NewInt(tableName, "user_id")
	_chats.Name = field.NewString(tableName, "name")
	_chats.Secret = field.NewString(tableName, "secret")

	_chats.fillFieldMap()

	return _chats
}

type chats struct {
	chatsDo

	ALL       field.Asterisk
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	UserID    field.Int
	Name      field.String
	Secret    field.String

	fieldMap map[string]field.Expr
}

func (c chats) Table(newTableName string) *chats {
	c.chatsDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c chats) As(alias string) *chats {
	c.chatsDo.DO = *(c.chatsDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *chats) updateTableName(table string) *chats {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewUint(table, "id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")
	c.UserID = field.NewInt(table, "user_id")
	c.Name = field.NewString(table, "name")
	c.Secret = field.NewString(table, "secret")

	c.fillFieldMap()

	return c
}

func (c *chats) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *chats) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 7)
	c.fieldMap["id"] = c.ID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["user_id"] = c.UserID
	c.fieldMap["name"] = c.Name
	c.fieldMap["secret"] = c.Secret
}

func (c chats) clone(db *gorm.DB) chats {
	c.chatsDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c chats) replaceDB(db *gorm.DB) chats {
	c.chatsDo.ReplaceDB(db)
	return c
}

type chatsDo struct{ gen.DO }

type IChatsDo interface {
	gen.SubQuery
	Debug() IChatsDo
	WithContext(ctx context.Context) IChatsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IChatsDo
	WriteDB() IChatsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IChatsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IChatsDo
	Not(conds ...gen.Condition) IChatsDo
	Or(conds ...gen.Condition) IChatsDo
	Select(conds ...field.Expr) IChatsDo
	Where(conds ...gen.Condition) IChatsDo
	Order(conds ...field.Expr) IChatsDo
	Distinct(cols ...field.Expr) IChatsDo
	Omit(cols ...field.Expr) IChatsDo
	Join(table schema.Tabler, on ...field.Expr) IChatsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IChatsDo
	RightJoin(table schema.Tabler, on ...field.Expr) IChatsDo
	Group(cols ...field.Expr) IChatsDo
	Having(conds ...gen.Condition) IChatsDo
	Limit(limit int) IChatsDo
	Offset(offset int) IChatsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IChatsDo
	Unscoped() IChatsDo
	Create(values ...*mysql.Chats) error
	CreateInBatches(values []*mysql.Chats, batchSize int) error
	Save(values ...*mysql.Chats) error
	First() (*mysql.Chats, error)
	Take() (*mysql.Chats, error)
	Last() (*mysql.Chats, error)
	Find() ([]*mysql.Chats, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*mysql.Chats, err error)
	FindInBatches(result *[]*mysql.Chats, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*mysql.Chats) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IChatsDo
	Assign(attrs ...field.AssignExpr) IChatsDo
	Joins(fields ...field.RelationField) IChatsDo
	Preload(fields ...field.RelationField) IChatsDo
	FirstOrInit() (*mysql.Chats, error)
	FirstOrCreate() (*mysql.Chats, error)
	FindByPage(offset int, limit int) (result []*mysql.Chats, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IChatsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetByID(id int) (result mysql.Chats, err error)
	GetByRoles(rolesName []string) (result []*mysql.Chats, err error)
	InsertValue(name string, age int) (err error)
}

// SELECT * FROM @@table WHERE id=@id
func (c chatsDo) GetByID(id int) (result mysql.Chats, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM chats WHERE id=? ")

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// GetByRoles query data by roles and return it as *slice of pointer*
//
//	(The below blank line is required to comment for the generated method)
//
// SELECT * FROM @@table WHERE role IN @rolesName
func (c chatsDo) GetByRoles(rolesName []string) (result []*mysql.Chats, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, rolesName)
	generateSQL.WriteString("SELECT * FROM chats WHERE role IN ? ")

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// InsertValue insert value
//
// INSERT INTO @@table (name, age) VALUES (@name, @age)
func (c chatsDo) InsertValue(name string, age int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, name)
	params = append(params, age)
	generateSQL.WriteString("INSERT INTO chats (name, age) VALUES (?, ?) ")

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (c chatsDo) Debug() IChatsDo {
	return c.withDO(c.DO.Debug())
}

func (c chatsDo) WithContext(ctx context.Context) IChatsDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c chatsDo) ReadDB() IChatsDo {
	return c.Clauses(dbresolver.Read)
}

func (c chatsDo) WriteDB() IChatsDo {
	return c.Clauses(dbresolver.Write)
}

func (c chatsDo) Session(config *gorm.Session) IChatsDo {
	return c.withDO(c.DO.Session(config))
}

func (c chatsDo) Clauses(conds ...clause.Expression) IChatsDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c chatsDo) Returning(value interface{}, columns ...string) IChatsDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c chatsDo) Not(conds ...gen.Condition) IChatsDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c chatsDo) Or(conds ...gen.Condition) IChatsDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c chatsDo) Select(conds ...field.Expr) IChatsDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c chatsDo) Where(conds ...gen.Condition) IChatsDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c chatsDo) Order(conds ...field.Expr) IChatsDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c chatsDo) Distinct(cols ...field.Expr) IChatsDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c chatsDo) Omit(cols ...field.Expr) IChatsDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c chatsDo) Join(table schema.Tabler, on ...field.Expr) IChatsDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c chatsDo) LeftJoin(table schema.Tabler, on ...field.Expr) IChatsDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c chatsDo) RightJoin(table schema.Tabler, on ...field.Expr) IChatsDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c chatsDo) Group(cols ...field.Expr) IChatsDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c chatsDo) Having(conds ...gen.Condition) IChatsDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c chatsDo) Limit(limit int) IChatsDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c chatsDo) Offset(offset int) IChatsDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c chatsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IChatsDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c chatsDo) Unscoped() IChatsDo {
	return c.withDO(c.DO.Unscoped())
}

func (c chatsDo) Create(values ...*mysql.Chats) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c chatsDo) CreateInBatches(values []*mysql.Chats, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c chatsDo) Save(values ...*mysql.Chats) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c chatsDo) First() (*mysql.Chats, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*mysql.Chats), nil
	}
}

func (c chatsDo) Take() (*mysql.Chats, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*mysql.Chats), nil
	}
}

func (c chatsDo) Last() (*mysql.Chats, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*mysql.Chats), nil
	}
}

func (c chatsDo) Find() ([]*mysql.Chats, error) {
	result, err := c.DO.Find()
	return result.([]*mysql.Chats), err
}

func (c chatsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*mysql.Chats, err error) {
	buf := make([]*mysql.Chats, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c chatsDo) FindInBatches(result *[]*mysql.Chats, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c chatsDo) Attrs(attrs ...field.AssignExpr) IChatsDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c chatsDo) Assign(attrs ...field.AssignExpr) IChatsDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c chatsDo) Joins(fields ...field.RelationField) IChatsDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c chatsDo) Preload(fields ...field.RelationField) IChatsDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c chatsDo) FirstOrInit() (*mysql.Chats, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*mysql.Chats), nil
	}
}

func (c chatsDo) FirstOrCreate() (*mysql.Chats, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*mysql.Chats), nil
	}
}

func (c chatsDo) FindByPage(offset int, limit int) (result []*mysql.Chats, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c chatsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c chatsDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c chatsDo) Delete(models ...*mysql.Chats) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *chatsDo) withDO(do gen.Dao) *chatsDo {
	c.DO = *do.(*gen.DO)
	return c
}
