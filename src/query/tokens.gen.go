// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"main/utils/db/mysql"
)

func newTokens(db *gorm.DB, opts ...gen.DOOption) tokens {
	_tokens := tokens{}

	_tokens.tokensDo.UseDB(db, opts...)
	_tokens.tokensDo.UseModel(&mysql.Tokens{})

	tableName := _tokens.tokensDo.TableName()
	_tokens.ALL = field.NewAsterisk(tableName)
	_tokens.ID = field.NewUint(tableName, "id")
	_tokens.CreatedAt = field.NewTime(tableName, "created_at")
	_tokens.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tokens.DeletedAt = field.NewField(tableName, "deleted_at")
	_tokens.UserID = field.NewUint(tableName, "user_id")
	_tokens.AccessToken = field.NewString(tableName, "access_token")
	_tokens.RefreshToken = field.NewString(tableName, "refresh_token")
	_tokens.RefreshExpiredAt = field.NewInt64(tableName, "refresh_expired_at")

	_tokens.fillFieldMap()

	return _tokens
}

type tokens struct {
	tokensDo

	ALL              field.Asterisk
	ID               field.Uint
	CreatedAt        field.Time
	UpdatedAt        field.Time
	DeletedAt        field.Field
	UserID           field.Uint
	AccessToken      field.String
	RefreshToken     field.String
	RefreshExpiredAt field.Int64

	fieldMap map[string]field.Expr
}

func (t tokens) Table(newTableName string) *tokens {
	t.tokensDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tokens) As(alias string) *tokens {
	t.tokensDo.DO = *(t.tokensDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tokens) updateTableName(table string) *tokens {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewUint(table, "id")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")
	t.UserID = field.NewUint(table, "user_id")
	t.AccessToken = field.NewString(table, "access_token")
	t.RefreshToken = field.NewString(table, "refresh_token")
	t.RefreshExpiredAt = field.NewInt64(table, "refresh_expired_at")

	t.fillFieldMap()

	return t
}

func (t *tokens) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tokens) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 8)
	t.fieldMap["id"] = t.ID
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
	t.fieldMap["user_id"] = t.UserID
	t.fieldMap["access_token"] = t.AccessToken
	t.fieldMap["refresh_token"] = t.RefreshToken
	t.fieldMap["refresh_expired_at"] = t.RefreshExpiredAt
}

func (t tokens) clone(db *gorm.DB) tokens {
	t.tokensDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tokens) replaceDB(db *gorm.DB) tokens {
	t.tokensDo.ReplaceDB(db)
	return t
}

type tokensDo struct{ gen.DO }

type ITokensDo interface {
	gen.SubQuery
	Debug() ITokensDo
	WithContext(ctx context.Context) ITokensDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITokensDo
	WriteDB() ITokensDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITokensDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITokensDo
	Not(conds ...gen.Condition) ITokensDo
	Or(conds ...gen.Condition) ITokensDo
	Select(conds ...field.Expr) ITokensDo
	Where(conds ...gen.Condition) ITokensDo
	Order(conds ...field.Expr) ITokensDo
	Distinct(cols ...field.Expr) ITokensDo
	Omit(cols ...field.Expr) ITokensDo
	Join(table schema.Tabler, on ...field.Expr) ITokensDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITokensDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITokensDo
	Group(cols ...field.Expr) ITokensDo
	Having(conds ...gen.Condition) ITokensDo
	Limit(limit int) ITokensDo
	Offset(offset int) ITokensDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITokensDo
	Unscoped() ITokensDo
	Create(values ...*mysql.Tokens) error
	CreateInBatches(values []*mysql.Tokens, batchSize int) error
	Save(values ...*mysql.Tokens) error
	First() (*mysql.Tokens, error)
	Take() (*mysql.Tokens, error)
	Last() (*mysql.Tokens, error)
	Find() ([]*mysql.Tokens, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*mysql.Tokens, err error)
	FindInBatches(result *[]*mysql.Tokens, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*mysql.Tokens) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITokensDo
	Assign(attrs ...field.AssignExpr) ITokensDo
	Joins(fields ...field.RelationField) ITokensDo
	Preload(fields ...field.RelationField) ITokensDo
	FirstOrInit() (*mysql.Tokens, error)
	FirstOrCreate() (*mysql.Tokens, error)
	FindByPage(offset int, limit int) (result []*mysql.Tokens, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITokensDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetByID(id int) (result mysql.Tokens, err error)
	GetByRoles(rolesName []string) (result []*mysql.Tokens, err error)
	InsertValue(name string, age int) (err error)
}

// SELECT * FROM @@table WHERE id=@id
func (t tokensDo) GetByID(id int) (result mysql.Tokens, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM tokens WHERE id=? ")

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// GetByRoles query data by roles and return it as *slice of pointer*
//
//	(The below blank line is required to comment for the generated method)
//
// SELECT * FROM @@table WHERE role IN @rolesName
func (t tokensDo) GetByRoles(rolesName []string) (result []*mysql.Tokens, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, rolesName)
	generateSQL.WriteString("SELECT * FROM tokens WHERE role IN ? ")

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// InsertValue insert value
//
// INSERT INTO @@table (name, age) VALUES (@name, @age)
func (t tokensDo) InsertValue(name string, age int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, name)
	params = append(params, age)
	generateSQL.WriteString("INSERT INTO tokens (name, age) VALUES (?, ?) ")

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (t tokensDo) Debug() ITokensDo {
	return t.withDO(t.DO.Debug())
}

func (t tokensDo) WithContext(ctx context.Context) ITokensDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tokensDo) ReadDB() ITokensDo {
	return t.Clauses(dbresolver.Read)
}

func (t tokensDo) WriteDB() ITokensDo {
	return t.Clauses(dbresolver.Write)
}

func (t tokensDo) Session(config *gorm.Session) ITokensDo {
	return t.withDO(t.DO.Session(config))
}

func (t tokensDo) Clauses(conds ...clause.Expression) ITokensDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tokensDo) Returning(value interface{}, columns ...string) ITokensDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tokensDo) Not(conds ...gen.Condition) ITokensDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tokensDo) Or(conds ...gen.Condition) ITokensDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tokensDo) Select(conds ...field.Expr) ITokensDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tokensDo) Where(conds ...gen.Condition) ITokensDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tokensDo) Order(conds ...field.Expr) ITokensDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tokensDo) Distinct(cols ...field.Expr) ITokensDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tokensDo) Omit(cols ...field.Expr) ITokensDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tokensDo) Join(table schema.Tabler, on ...field.Expr) ITokensDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tokensDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITokensDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tokensDo) RightJoin(table schema.Tabler, on ...field.Expr) ITokensDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tokensDo) Group(cols ...field.Expr) ITokensDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tokensDo) Having(conds ...gen.Condition) ITokensDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tokensDo) Limit(limit int) ITokensDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tokensDo) Offset(offset int) ITokensDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tokensDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITokensDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tokensDo) Unscoped() ITokensDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tokensDo) Create(values ...*mysql.Tokens) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tokensDo) CreateInBatches(values []*mysql.Tokens, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tokensDo) Save(values ...*mysql.Tokens) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tokensDo) First() (*mysql.Tokens, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*mysql.Tokens), nil
	}
}

func (t tokensDo) Take() (*mysql.Tokens, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*mysql.Tokens), nil
	}
}

func (t tokensDo) Last() (*mysql.Tokens, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*mysql.Tokens), nil
	}
}

func (t tokensDo) Find() ([]*mysql.Tokens, error) {
	result, err := t.DO.Find()
	return result.([]*mysql.Tokens), err
}

func (t tokensDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*mysql.Tokens, err error) {
	buf := make([]*mysql.Tokens, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tokensDo) FindInBatches(result *[]*mysql.Tokens, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tokensDo) Attrs(attrs ...field.AssignExpr) ITokensDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tokensDo) Assign(attrs ...field.AssignExpr) ITokensDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tokensDo) Joins(fields ...field.RelationField) ITokensDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tokensDo) Preload(fields ...field.RelationField) ITokensDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tokensDo) FirstOrInit() (*mysql.Tokens, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*mysql.Tokens), nil
	}
}

func (t tokensDo) FirstOrCreate() (*mysql.Tokens, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*mysql.Tokens), nil
	}
}

func (t tokensDo) FindByPage(offset int, limit int) (result []*mysql.Tokens, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tokensDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tokensDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tokensDo) Delete(models ...*mysql.Tokens) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tokensDo) withDO(do gen.Dao) *tokensDo {
	t.DO = *do.(*gen.DO)
	return t
}
