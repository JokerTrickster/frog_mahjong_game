// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"main/utils/db/mysql"
)

func newCards(db *gorm.DB, opts ...gen.DOOption) cards {
	_cards := cards{}

	_cards.cardsDo.UseDB(db, opts...)
	_cards.cardsDo.UseModel(&mysql.Cards{})

	tableName := _cards.cardsDo.TableName()
	_cards.ALL = field.NewAsterisk(tableName)
	_cards.ID = field.NewUint(tableName, "id")
	_cards.CreatedAt = field.NewTime(tableName, "created_at")
	_cards.UpdatedAt = field.NewTime(tableName, "updated_at")
	_cards.DeletedAt = field.NewField(tableName, "deleted_at")
	_cards.RoomID = field.NewInt(tableName, "room_id")
	_cards.UserID = field.NewInt(tableName, "user_id")
	_cards.Name = field.NewString(tableName, "name")
	_cards.Color = field.NewString(tableName, "color")
	_cards.State = field.NewString(tableName, "state")

	_cards.fillFieldMap()

	return _cards
}

type cards struct {
	cardsDo

	ALL       field.Asterisk
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	RoomID    field.Int
	UserID    field.Int
	Name      field.String
	Color     field.String
	State     field.String

	fieldMap map[string]field.Expr
}

func (c cards) Table(newTableName string) *cards {
	c.cardsDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cards) As(alias string) *cards {
	c.cardsDo.DO = *(c.cardsDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cards) updateTableName(table string) *cards {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewUint(table, "id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")
	c.RoomID = field.NewInt(table, "room_id")
	c.UserID = field.NewInt(table, "user_id")
	c.Name = field.NewString(table, "name")
	c.Color = field.NewString(table, "color")
	c.State = field.NewString(table, "state")

	c.fillFieldMap()

	return c
}

func (c *cards) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cards) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 9)
	c.fieldMap["id"] = c.ID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["room_id"] = c.RoomID
	c.fieldMap["user_id"] = c.UserID
	c.fieldMap["name"] = c.Name
	c.fieldMap["color"] = c.Color
	c.fieldMap["state"] = c.State
}

func (c cards) clone(db *gorm.DB) cards {
	c.cardsDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cards) replaceDB(db *gorm.DB) cards {
	c.cardsDo.ReplaceDB(db)
	return c
}

type cardsDo struct{ gen.DO }

type ICardsDo interface {
	gen.SubQuery
	Debug() ICardsDo
	WithContext(ctx context.Context) ICardsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICardsDo
	WriteDB() ICardsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICardsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICardsDo
	Not(conds ...gen.Condition) ICardsDo
	Or(conds ...gen.Condition) ICardsDo
	Select(conds ...field.Expr) ICardsDo
	Where(conds ...gen.Condition) ICardsDo
	Order(conds ...field.Expr) ICardsDo
	Distinct(cols ...field.Expr) ICardsDo
	Omit(cols ...field.Expr) ICardsDo
	Join(table schema.Tabler, on ...field.Expr) ICardsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICardsDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICardsDo
	Group(cols ...field.Expr) ICardsDo
	Having(conds ...gen.Condition) ICardsDo
	Limit(limit int) ICardsDo
	Offset(offset int) ICardsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICardsDo
	Unscoped() ICardsDo
	Create(values ...*mysql.Cards) error
	CreateInBatches(values []*mysql.Cards, batchSize int) error
	Save(values ...*mysql.Cards) error
	First() (*mysql.Cards, error)
	Take() (*mysql.Cards, error)
	Last() (*mysql.Cards, error)
	Find() ([]*mysql.Cards, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*mysql.Cards, err error)
	FindInBatches(result *[]*mysql.Cards, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*mysql.Cards) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICardsDo
	Assign(attrs ...field.AssignExpr) ICardsDo
	Joins(fields ...field.RelationField) ICardsDo
	Preload(fields ...field.RelationField) ICardsDo
	FirstOrInit() (*mysql.Cards, error)
	FirstOrCreate() (*mysql.Cards, error)
	FindByPage(offset int, limit int) (result []*mysql.Cards, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICardsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetByID(id int) (result mysql.Cards, err error)
	GetByRoles(rolesName []string) (result []*mysql.Cards, err error)
	InsertValue(name string, age int) (err error)
}

// SELECT * FROM @@table WHERE id=@id
func (c cardsDo) GetByID(id int) (result mysql.Cards, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM cards WHERE id=? ")

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// GetByRoles query data by roles and return it as *slice of pointer*
//
//	(The below blank line is required to comment for the generated method)
//
// SELECT * FROM @@table WHERE role IN @rolesName
func (c cardsDo) GetByRoles(rolesName []string) (result []*mysql.Cards, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, rolesName)
	generateSQL.WriteString("SELECT * FROM cards WHERE role IN ? ")

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// InsertValue insert value
//
// INSERT INTO @@table (name, age) VALUES (@name, @age)
func (c cardsDo) InsertValue(name string, age int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, name)
	params = append(params, age)
	generateSQL.WriteString("INSERT INTO cards (name, age) VALUES (?, ?) ")

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (c cardsDo) Debug() ICardsDo {
	return c.withDO(c.DO.Debug())
}

func (c cardsDo) WithContext(ctx context.Context) ICardsDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cardsDo) ReadDB() ICardsDo {
	return c.Clauses(dbresolver.Read)
}

func (c cardsDo) WriteDB() ICardsDo {
	return c.Clauses(dbresolver.Write)
}

func (c cardsDo) Session(config *gorm.Session) ICardsDo {
	return c.withDO(c.DO.Session(config))
}

func (c cardsDo) Clauses(conds ...clause.Expression) ICardsDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cardsDo) Returning(value interface{}, columns ...string) ICardsDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cardsDo) Not(conds ...gen.Condition) ICardsDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cardsDo) Or(conds ...gen.Condition) ICardsDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cardsDo) Select(conds ...field.Expr) ICardsDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cardsDo) Where(conds ...gen.Condition) ICardsDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cardsDo) Order(conds ...field.Expr) ICardsDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cardsDo) Distinct(cols ...field.Expr) ICardsDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cardsDo) Omit(cols ...field.Expr) ICardsDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cardsDo) Join(table schema.Tabler, on ...field.Expr) ICardsDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cardsDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICardsDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cardsDo) RightJoin(table schema.Tabler, on ...field.Expr) ICardsDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cardsDo) Group(cols ...field.Expr) ICardsDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cardsDo) Having(conds ...gen.Condition) ICardsDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cardsDo) Limit(limit int) ICardsDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cardsDo) Offset(offset int) ICardsDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cardsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICardsDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cardsDo) Unscoped() ICardsDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cardsDo) Create(values ...*mysql.Cards) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cardsDo) CreateInBatches(values []*mysql.Cards, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cardsDo) Save(values ...*mysql.Cards) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cardsDo) First() (*mysql.Cards, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*mysql.Cards), nil
	}
}

func (c cardsDo) Take() (*mysql.Cards, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*mysql.Cards), nil
	}
}

func (c cardsDo) Last() (*mysql.Cards, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*mysql.Cards), nil
	}
}

func (c cardsDo) Find() ([]*mysql.Cards, error) {
	result, err := c.DO.Find()
	return result.([]*mysql.Cards), err
}

func (c cardsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*mysql.Cards, err error) {
	buf := make([]*mysql.Cards, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cardsDo) FindInBatches(result *[]*mysql.Cards, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cardsDo) Attrs(attrs ...field.AssignExpr) ICardsDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cardsDo) Assign(attrs ...field.AssignExpr) ICardsDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cardsDo) Joins(fields ...field.RelationField) ICardsDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cardsDo) Preload(fields ...field.RelationField) ICardsDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cardsDo) FirstOrInit() (*mysql.Cards, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*mysql.Cards), nil
	}
}

func (c cardsDo) FirstOrCreate() (*mysql.Cards, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*mysql.Cards), nil
	}
}

func (c cardsDo) FindByPage(offset int, limit int) (result []*mysql.Cards, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cardsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cardsDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cardsDo) Delete(models ...*mysql.Cards) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cardsDo) withDO(do gen.Dao) *cardsDo {
	c.DO = *do.(*gen.DO)
	return c
}
