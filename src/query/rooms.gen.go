// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"main/utils/db/mysql"
)

func newRooms(db *gorm.DB, opts ...gen.DOOption) rooms {
	_rooms := rooms{}

	_rooms.roomsDo.UseDB(db, opts...)
	_rooms.roomsDo.UseModel(&mysql.Rooms{})

	tableName := _rooms.roomsDo.TableName()
	_rooms.ALL = field.NewAsterisk(tableName)
	_rooms.ID = field.NewUint(tableName, "id")
	_rooms.CreatedAt = field.NewTime(tableName, "created_at")
	_rooms.UpdatedAt = field.NewTime(tableName, "updated_at")
	_rooms.DeletedAt = field.NewField(tableName, "deleted_at")
	_rooms.CurrentCount = field.NewInt(tableName, "current_count")
	_rooms.MaxCount = field.NewInt(tableName, "max_count")
	_rooms.MinCount = field.NewInt(tableName, "min_count")
	_rooms.Name = field.NewString(tableName, "name")
	_rooms.Password = field.NewString(tableName, "password")
	_rooms.State = field.NewString(tableName, "state")
	_rooms.OwnerID = field.NewInt(tableName, "owner_id")

	_rooms.fillFieldMap()

	return _rooms
}

type rooms struct {
	roomsDo

	ALL          field.Asterisk
	ID           field.Uint
	CreatedAt    field.Time
	UpdatedAt    field.Time
	DeletedAt    field.Field
	CurrentCount field.Int
	MaxCount     field.Int
	MinCount     field.Int
	Name         field.String
	Password     field.String
	State        field.String
	OwnerID      field.Int

	fieldMap map[string]field.Expr
}

func (r rooms) Table(newTableName string) *rooms {
	r.roomsDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r rooms) As(alias string) *rooms {
	r.roomsDo.DO = *(r.roomsDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *rooms) updateTableName(table string) *rooms {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewUint(table, "id")
	r.CreatedAt = field.NewTime(table, "created_at")
	r.UpdatedAt = field.NewTime(table, "updated_at")
	r.DeletedAt = field.NewField(table, "deleted_at")
	r.CurrentCount = field.NewInt(table, "current_count")
	r.MaxCount = field.NewInt(table, "max_count")
	r.MinCount = field.NewInt(table, "min_count")
	r.Name = field.NewString(table, "name")
	r.Password = field.NewString(table, "password")
	r.State = field.NewString(table, "state")
	r.OwnerID = field.NewInt(table, "owner_id")

	r.fillFieldMap()

	return r
}

func (r *rooms) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *rooms) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 11)
	r.fieldMap["id"] = r.ID
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["updated_at"] = r.UpdatedAt
	r.fieldMap["deleted_at"] = r.DeletedAt
	r.fieldMap["current_count"] = r.CurrentCount
	r.fieldMap["max_count"] = r.MaxCount
	r.fieldMap["min_count"] = r.MinCount
	r.fieldMap["name"] = r.Name
	r.fieldMap["password"] = r.Password
	r.fieldMap["state"] = r.State
	r.fieldMap["owner_id"] = r.OwnerID
}

func (r rooms) clone(db *gorm.DB) rooms {
	r.roomsDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r rooms) replaceDB(db *gorm.DB) rooms {
	r.roomsDo.ReplaceDB(db)
	return r
}

type roomsDo struct{ gen.DO }

type IRoomsDo interface {
	gen.SubQuery
	Debug() IRoomsDo
	WithContext(ctx context.Context) IRoomsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRoomsDo
	WriteDB() IRoomsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRoomsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRoomsDo
	Not(conds ...gen.Condition) IRoomsDo
	Or(conds ...gen.Condition) IRoomsDo
	Select(conds ...field.Expr) IRoomsDo
	Where(conds ...gen.Condition) IRoomsDo
	Order(conds ...field.Expr) IRoomsDo
	Distinct(cols ...field.Expr) IRoomsDo
	Omit(cols ...field.Expr) IRoomsDo
	Join(table schema.Tabler, on ...field.Expr) IRoomsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRoomsDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRoomsDo
	Group(cols ...field.Expr) IRoomsDo
	Having(conds ...gen.Condition) IRoomsDo
	Limit(limit int) IRoomsDo
	Offset(offset int) IRoomsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRoomsDo
	Unscoped() IRoomsDo
	Create(values ...*mysql.Rooms) error
	CreateInBatches(values []*mysql.Rooms, batchSize int) error
	Save(values ...*mysql.Rooms) error
	First() (*mysql.Rooms, error)
	Take() (*mysql.Rooms, error)
	Last() (*mysql.Rooms, error)
	Find() ([]*mysql.Rooms, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*mysql.Rooms, err error)
	FindInBatches(result *[]*mysql.Rooms, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*mysql.Rooms) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRoomsDo
	Assign(attrs ...field.AssignExpr) IRoomsDo
	Joins(fields ...field.RelationField) IRoomsDo
	Preload(fields ...field.RelationField) IRoomsDo
	FirstOrInit() (*mysql.Rooms, error)
	FirstOrCreate() (*mysql.Rooms, error)
	FindByPage(offset int, limit int) (result []*mysql.Rooms, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRoomsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetByID(id int) (result mysql.Rooms, err error)
	GetByRoles(rolesName []string) (result []*mysql.Rooms, err error)
	InsertValue(name string, age int) (err error)
}

// SELECT * FROM @@table WHERE id=@id
func (r roomsDo) GetByID(id int) (result mysql.Rooms, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM rooms WHERE id=? ")

	var executeSQL *gorm.DB
	executeSQL = r.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// GetByRoles query data by roles and return it as *slice of pointer*
//
//	(The below blank line is required to comment for the generated method)
//
// SELECT * FROM @@table WHERE role IN @rolesName
func (r roomsDo) GetByRoles(rolesName []string) (result []*mysql.Rooms, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, rolesName)
	generateSQL.WriteString("SELECT * FROM rooms WHERE role IN ? ")

	var executeSQL *gorm.DB
	executeSQL = r.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// InsertValue insert value
//
// INSERT INTO @@table (name, age) VALUES (@name, @age)
func (r roomsDo) InsertValue(name string, age int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, name)
	params = append(params, age)
	generateSQL.WriteString("INSERT INTO rooms (name, age) VALUES (?, ?) ")

	var executeSQL *gorm.DB
	executeSQL = r.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (r roomsDo) Debug() IRoomsDo {
	return r.withDO(r.DO.Debug())
}

func (r roomsDo) WithContext(ctx context.Context) IRoomsDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r roomsDo) ReadDB() IRoomsDo {
	return r.Clauses(dbresolver.Read)
}

func (r roomsDo) WriteDB() IRoomsDo {
	return r.Clauses(dbresolver.Write)
}

func (r roomsDo) Session(config *gorm.Session) IRoomsDo {
	return r.withDO(r.DO.Session(config))
}

func (r roomsDo) Clauses(conds ...clause.Expression) IRoomsDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r roomsDo) Returning(value interface{}, columns ...string) IRoomsDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r roomsDo) Not(conds ...gen.Condition) IRoomsDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r roomsDo) Or(conds ...gen.Condition) IRoomsDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r roomsDo) Select(conds ...field.Expr) IRoomsDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r roomsDo) Where(conds ...gen.Condition) IRoomsDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r roomsDo) Order(conds ...field.Expr) IRoomsDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r roomsDo) Distinct(cols ...field.Expr) IRoomsDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r roomsDo) Omit(cols ...field.Expr) IRoomsDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r roomsDo) Join(table schema.Tabler, on ...field.Expr) IRoomsDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r roomsDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRoomsDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r roomsDo) RightJoin(table schema.Tabler, on ...field.Expr) IRoomsDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r roomsDo) Group(cols ...field.Expr) IRoomsDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r roomsDo) Having(conds ...gen.Condition) IRoomsDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r roomsDo) Limit(limit int) IRoomsDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r roomsDo) Offset(offset int) IRoomsDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r roomsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRoomsDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r roomsDo) Unscoped() IRoomsDo {
	return r.withDO(r.DO.Unscoped())
}

func (r roomsDo) Create(values ...*mysql.Rooms) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r roomsDo) CreateInBatches(values []*mysql.Rooms, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r roomsDo) Save(values ...*mysql.Rooms) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r roomsDo) First() (*mysql.Rooms, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*mysql.Rooms), nil
	}
}

func (r roomsDo) Take() (*mysql.Rooms, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*mysql.Rooms), nil
	}
}

func (r roomsDo) Last() (*mysql.Rooms, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*mysql.Rooms), nil
	}
}

func (r roomsDo) Find() ([]*mysql.Rooms, error) {
	result, err := r.DO.Find()
	return result.([]*mysql.Rooms), err
}

func (r roomsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*mysql.Rooms, err error) {
	buf := make([]*mysql.Rooms, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r roomsDo) FindInBatches(result *[]*mysql.Rooms, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r roomsDo) Attrs(attrs ...field.AssignExpr) IRoomsDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r roomsDo) Assign(attrs ...field.AssignExpr) IRoomsDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r roomsDo) Joins(fields ...field.RelationField) IRoomsDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r roomsDo) Preload(fields ...field.RelationField) IRoomsDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r roomsDo) FirstOrInit() (*mysql.Rooms, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*mysql.Rooms), nil
	}
}

func (r roomsDo) FirstOrCreate() (*mysql.Rooms, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*mysql.Rooms), nil
	}
}

func (r roomsDo) FindByPage(offset int, limit int) (result []*mysql.Rooms, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r roomsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r roomsDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r roomsDo) Delete(models ...*mysql.Rooms) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *roomsDo) withDO(do gen.Dao) *roomsDo {
	r.DO = *do.(*gen.DO)
	return r
}
